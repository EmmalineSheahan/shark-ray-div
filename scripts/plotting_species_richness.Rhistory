install.packages("rjson")
library(rjson)
getwd()
great_white_example <- fromJSON(file = "Carcharodon carcharias.json")
# going to look at what the data entails
great_white_example
str(great_white_example)
dim(great_white_example)
names(great_white_example)
head(great_white_example$geometry)
head(great_white_example$geometry, n=1)
head(great_white_example$geometry, n=2)
names(great_white_example)
dim(great_white_example$geometry)
colnames(great_white_example$geometry) <- c("longitude", "latitude")
str(great_white_example$geometry)
smaller_range_example <- fromJSON(file = "Callorhinchus capensis.json")
names(smaller_range_example)
smaller_range_example$type
smaller_range_example$properties
class(smaller_range_example$geometry)
smaller_range_example$geometry
length(smaller_range_example$geometry)
df <- data.fram(matrix(unlist(smaller_range_example$geometry) nrow = 2, byrow = T))
geo_example <- smaller_range_example$geometry
df <- data.frame(matrix(unlist(geo_example), nrow=2, byrow = T))
df <- data.frame(matrix(unlist(geo_example), ncol = 2, nrow = 7277, byrow = T))
colnames(df) <- c("longitude", "latitude")
df
df <- data.frame(matrix(unlist(geo_example[2:7277]), ncol=2, byrow = T))
colnames(df) <- c("longitude", "latitude")
head(df)
# going to read in json file as spatial data
require(rgdal)
lemon_shark_example <- rgdal::readOGR("json/Negaprion brevirostris.geojson", "OGRGeoJSON")
lemon_shark_example <- rgdal::readOGR("json/Negaprion brevirostris.json", "OGRGeoJSON")
lemon_shark_example <- rgdal::readOGR("json/Negaprion brevirostris.json", "OGRJSON")
# going to see if I can convert the json file to geojson with the geojsonio package
install.packages(geojsonio)
install.packages("geojsonio")
require(geojsonio)
geojson_json(smaller_range_example, geometry = polygon, pretty = TRUE)
geojson_json(geo_example, geometry = polygon, pretty = TRUE)
dfgeo <- geojson_json(df, geometry = polygon, pretty = TRUE)
dfgeo <- geojson_json(df, geometry = "polygon", pretty = TRUE)
class(dfgeo)
# going to see if plot works on this geojson
plot(dfgeo)
proj4string(dfgeo)
dfgeo_sp <- readOGR(dfgeo, "OGRGeoJSON", verbose = F, p4s = '+init=epsg:4326')
# going to see if I can turn the geometry list directly into a spatial polygon
geo_example_co <- sapply(geo_example, Polygon)
# ok trying this the long way
head(df)
dput(df)
#turning the df back into a list
geo_list <- lapply(df)
geo_list <- lapply(df, function(x))
geo_list <- lapply(df, function(x) {x <- NULL; x })
geo_list_poly <- sapply(geo_list, Polygon)
geo_sp <- SpatialPolygons(list(geo_list), proj4string = CRS("+proj=longlat +datum=WGS84"))
# going to turn the df into a spatial points data frame
xy <- df[, c(1,2)]
spdf <- SpatialPointsDataFrame(coords = xy, data = df, proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
# going to see if spplot works on it
spplot(spdf)
head(df)
# spplot gave me something weird. the range itself looks right but it's separated into longitude and latitude. let me see if I can fix it
# going to make a world map
world <- map(database = "world", fill = T, plot = F)
require(maps)
require(maptools)
world <- map(database = "world", fill = T, plot = F)
world_sp <- map2SpatialPolygons(world, IDs, CRS("+proj=longlat"))
map2SpatialPolygons(world, spdf, CRS("+proj=longlat"))
map2SpatialPolygons(world, spdf, CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
going to fix the data frame
# going to fix the data frame
head(df)
coordinates(df) = ~Lat+lon
coordinates(df) <- ~Lat+Lon
coordinates(df) <- ~lat+lon
coordinates(df) <- ~"lat"+"lon"
?coordinates
coordinates(df) = ~longitude+latitude
class(df)
spplot(df)
# going to try and make a map
plot(world)
world <- map(database = "world")
plot(world)
plot(world, asp = 1)
names(df)
head(df)
points(df)
# going to make the map look better
world
world = map(database = "world")
points(df, col = "blue", cex = 0.5)
points(df, col = "blue", cex = 0.05)
# going to zoom in on it
world = map(database = "world", regions = c("Angola", "Namibia", "Botswana", "South Africa"))
points(df, col = "red", cex = 0.5)
# going to try with a bigger range
names(great_white_example)
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry), ncol = 2, byrow = T))
head(greatwhitedf)
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry[2: ]), ncol =2, byrow = T))
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry[2:1691871]), ncol = 2, byrow = T))
colnames(greatwhitedf) <- c("longitude", "latitude")
head(greatwhitedf)
coordinates(greatwhitedf) <- ~longitude+latitude
class(greatwhitedf)
world = map(database = "World")
world = map(database = "world")
points(greatwhitedf, col = "blue", cex = 0.5)
# so I figured out how to plot the ranges as spatial points, now I want to plot them as spatial polygons
?Polygon
greatwhitepolygon <- Polygon(greatwhitedf)
greatwhitesp <- SpatialPolygons(greatwhitepolygon, proj4string = CRS("+proj=longlat +ellps=WGS84"))
greatwhitepolygon_list <- list(greatwhitepolygon)
greatwhitesp <- SpatialPolygons(greatwhitepolygon_list, proj4string = CRS("+proj=longlat +ellps=WGS84"))
Polygons(greatwhitepolygon_list, "greatwhiterange")
greatwhitepolygons <- Polygons(greatwhitepolygon_list, "greatwhiterange")
greatwhite_sp <- SpatialPolygons(greatwhitepolygons, proj4string = CRS("+proj=longlat +ellps=WGS84"))
greatwhite_sp <- SpatialPolygons(greatwhitepolygon_list, proj4string = CRS("+proj=longlat +ellps=WGS84"))
greatwhite_sp <- SpatialPolygons(list(greatwhitepolygons), proj4string = CRS("+proj=longlat +ellps=WGS84"))
plot(greatwhite_sp)
plot(greatwhitepolygon)
# well this plot looks like a mess so I think I need to specify something in the pO
?Polygon
?map
?map2SpatialPolygons
world_map <- map2SpatialPolygons(world, IDs = world$names, proj4string = CRS("+proj=longlat +ellps=WGS84"))
world <- map(database ="world", fill = T, plot = F)
world_sp <- map2SpatialPolygons(world, IDs = world$names, proj4string = CRS("+proj=longlat +ellps=WGS84"))
?spplot
# going to see what happens if I use spplot
spplot(world_sp, greatwhite_sp)
plot(world_sp)
plot(world_sp, greatwhite_sp)
# let me see if I can plot the range better with ggplot
install.packages("ggplot2")
require(ggplot2)
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude)) + geom_polygon()
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry[2:1691871]), ncol = 2, byrow = T))
colnames(greatwhitedf) <- c("longitude", "latitude")
head(greatwhitedf)
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude)) + geom_polygon
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude)) +geom_polygon()
great_white_range_map
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude, group = group, fill = T)) + geom_polygon() + theme(legend.position = "none", title = element_blank(), axis.text = element_blank())
great_white_range_map
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude, fill = T)) + geom_polygon() + theme(legend.position = "none", title = element_blank(), axis.text = element_blank())
great_white_range_map
greatwhitedf["new.col"] <- c(1:1691871)
order <- c(1:1691871)
greatwhitedf <- data.frame(greatwhitedf, order)
order <- c(1:845935)
greatwhitedf <- data.frame(greatwhitedf, order)
head(greatwhitedf)
great_white_range_map <- ggplot() + geom_polygon(data = greatwhitedf, aes(x = longitude, y = latitude, fill = T))
great_white_range_map
install.packages("ggmap")
require(ggmap)
world <- get_map("world")
great_white_range_map <- ggmap(world) + ggplot() + geom_polygon(data = greatwhitedf, aes(x = longitude, y = latitude)) + theme(legend.position = "none", title = element_blank(), axis.text = element_blank())
great_white_range_map <- ggmap(world) + ggplot(data = greatwhitedf, aes(x = longitude, y = latitude))
savehistory("~/sharkbiogeography/experimenting with organizing and plotting data.Rhistory")
require(rjson)
require(maps)
require(maptools)
require(rgdal)
require(lattice)
whale_shark_example <- fromJSON(file = "Rhincodon typus.json")
whale_shark_example <- readOGR(dsn = "C:/Users/Documents/Emmaline/sharkbiogeography/data/Rhincodon typus.json", layer = "OGRGeoJSON")
whale_shark_example <- readOGR(dsn = "C:/Users/Documents/Emmaline/sharkbiogeography/data/Rhincodon typus", layer = "OGRGeoJSON")
getwd()
whale_shark_example <- readOGR(dsn = "C:/Users/Emmaline/Documents/sharkbiogeography/Rhincodon typus.json", layer = "OGRGeojson")
whale_shark_example <- readOGR(dsn = "C:/Users/Emmaline/Documents/sharkbiogeography/Rhincodon typus.json", layer = "OGRGeoJSON")
class(whale_shark_example)
whale_shark_example <- fromJSON(file = "Rhincodon typus.json")
class(whale_shark_example)
names(whale_shark_example)
whaledf <- matrix(unlist(whale_shark_example$geometry), ncol = 2, byrow = T)
head(whaledf)
whaledf <- matrix(unlist(whale_shark_example$geometry[2:945175]), ncol = 2, byrow = T)
colnames(whaledf) <- ("lon", "lat")
colenames(whaledf) <- c("lon", "lat")
colnames(whaledf) <- c("lon", "lat")
head(whaledf)
species <- c("whale shark")
data.frame(whaledf, species)
head(whaledf)
whaledf <- data.frame(whaledf, species)
head(whaledf)
mako_shark_example <- fromJSON(file = "Isurus oxyrinchus.json")
makodf <- matrix(unlist(mako_shark_example$geometry), ncol = 2, byrow = T)
makodf <- matrix(unlis(mako_shark_example$geometry[2:1379675]), ncol = 2, byrow = T)
makodf <- matrix(unlist(mako_shark_example$geometry[2:1379675]), ncol = 2, byrow = T)
colnames(makodf) <- c("lon", "lat")
head(makodf)
species <- c("mako shark")
makodf <- data.frame(makodf, species)
head(makodf)
head(whaledf)
sharkdf <- rbind(whaledf, makodf)
coordinates(sharkdf) <- ~lon + lat
class(sharkdf)
map(database = "world")
points(sharkdf)
map(database = "world", regions = c("South Africa", "Namibia"))
points(sharkdf)
head(whaledf)
head(makodf)
require(rjson)
require(maps)
require(maptools)
require(rgdal)
require(lattice)
require(raster)
# I'm going to try to map species richness in a small area using five different species just to see if I can use this method for the global map
# going to read in files for the tiger shark, great hammerhead, and oceanic whitetip. I've already read in the whale and mako sharks
tiger_shark_example <- fromJSON(file = "Galeocerdo cuvier.json")
hammerhead_example <- fromJSON(file = "Sphyrna mokarran.json")
whitetip_example <- fromJSON(file = "Carcharhinus longimanus")
whitetip_example <- fromJSON(file = "Carcharhinus longimanus.json")
# going to make data frames for each of their geometries
tigerdf <- matrix(unlist(tiger_shark_example$geometry), ncol = 2, byrow = T)
tigerdf <- matrix(unlist(tiger_shark_example$geometry[2:1041609]), ncol = 2, byrow = T)
head(tigerdf)
colnames(tigerdf) <- c("lon", "lat")
species <- c("tiger shark")
tigerdf <- rbind(tigerdf, species)
head(tigerdf)
tigerdf <- split(tigerdf, species)
head(tigerdf)
tigerdf <- matrix(unlist(tiger_shark_example$geometry[2:1041609]), ncol = 2, byrow = T)
colnames(tigerdf) <- c("lon", "lat")
head(tigerdf)
species <- c("tiger shark")
tigerdf <- data.frame(tigerdf, species)
head(tigerdf)
hammerheaddf <- matrix(unlist(hammerhead_example$geometry[2:n]), ncol = 2, byrow = T)
hammerheaddf <- matrix(unlist(hammerhead_example$geometry[2: ]), ncol = 2, byrow = T)
hammerheaddf <- matrix(unlist(hammerhead$geometry), ncol = 2, byrow = T)
hammerheaddf <- matrix(unlist(hammerhead_example$geometry), ncol = 2, byrow = T)
names(hammerhead_example)
class(hammerhead_example$crs)
hammerheaddf <- matrix(unlist(hammerhead_example$crs), ncol = 2, byrow = T)
head(hammerheaddf)
# for some reason the hammerhead and whitetip data are arranged really differently, so I'm going to use something else
head(greatwhitedf)
greatwhitedf <- split(greatwhitedf, order)
greatwhitedf <- matrix(unlist(great_white_example$geometry), ncol = 2, byrow = T)
greatwhitedf <- matrix(unlist(great_white_example$geometry[2:1691871]), ncol = 2, byrow = T)
colnames(greatwhitedf) <- c("lon", "lat")
species <- c("greatwhite shark")
greatwhitedf <- data.frame(greatwhitedf, species)
head(greatwhitedf)
head(df)
chimeradf <- matrix(unlist(smaller_range_example$geometry), ncol = 2, byrow = T)
chimeradf <- matrix(unlist(smaller_range_example$geometry[2:7277]), ncol = 2, byrow = T)
colnames(chimeradf) <- c("lon", "lat")
species <- c("cape elephant fish")
chimeradf <- data.frame(chimeradf, species)
head(chimeradf)
# ok so I have five separate data frames for five separate species, the whale, mako, tiger, and great white sharks, and the cape elephant fish chimera. I'm going to merge them all into one data frame
species_df <- rbind(whaledf, makodf, tigerdf, greatwhitedf, chimeradf)
head(species_df)
# I'm going to bring up a map of the region I'm looking at
southern_africa <- map(database = "world", regions = c("South Africa", "Namibia", "Angola", "Botswana"))
plot(southern_africa, axes = TRUE)
southern_africa
map(southern_africa)
names(sharkdf)
colnames(sharkdf) <- c("lon", "lat", "species")
head(sharkdf)
head(whaledf)
names(whaledf)
sharkdf <- rbind(whaledf, makodf, tigerdf, greatwhitedf, chimeradf)
head(sharkdf)
names(sharkdf)
map(southern_africa)
# I'm going to plot the coordinate points of all the species on the map
map(southern_africa)
points(sharkdf$lon, sharkdf$lat, cex = 0.5, col = 'blue')
# now to make a spatial points data frame
species_sp <- sharkdf
coordinates(species_sp) <- ~lon + lat
proj4string(species_sp) <- CRS("+proj=longlat +datum=WGS84")
class(species_sp)
# going to transform the plot into something of equal area so it works better with raster
projection(southern_africa) <- "+proj=longlat +datum=WGS84"
class(southern_africa)
southern_africa <- map2SpatialPolygons(southern_africa, IDs = southern_africa$names, CRS("+proj=longlat +datum=WGS84"))
length(southern_africa)
length(southern_africa$names)
southern_africa$names
southern_africa <- map2SpatialPolygons(southern_africa, IDs = c("South Africa", "Botswana", "Angola", "Namibia"), CRS("+proj=longlat +datum=WGS84"))
countries <- c("South Africa", "Namibia", "Botswana", "Angola")
length(countries)
southern_africa <- map2SpatialPolygons(southern_africa, IDs = countries, CRS("+proj=longlat +datum=WGS84"))
length(southern_africa)
length(countries)
southern_africa <- map2SpatialPolygons(southern_africa, countries, CRS("+proj=longlat +datum=WGS84"))
proj4string(southern_africa)
IDs <- sub("^world,","",southern_africa$names)
IDs
southern_africa <- map2SpatialPolygons(southern_africa, IDs, CRS("+proj=longlat +datum=WGS84"))
IDs <- sapply(strsplit(southern_africa$names, ":"), function(x) x[1])
southern_africa <- map2SpatialPolygons(southern_africa, IDs, CRS("+proj=longlat +datum=WGS84"))
# ok for some reason this isn't working, I keep getting the error that the map and IDs are different lengths even though I've checked and made sure they are both 4, so I'm just going to try this again with a world map
world <- map(database = "world")
points(sharkdf$lon, sharkdf$lat, cex = 0.5, col = 'blue')
world <- map2SpatialPolygons(world, IDs = world$names, CRS("+proj=longlat +datum=WGS84"))
world <- map(database = "world", fill = T, plot = F)
world_longlat <- map2SpatialPolygons(world, IDs = world$names, CRS("+proj=longlat +datum=WGS84"))
world_laea <- spTransform(world_longlat, CRS("+proj=laea"))
species_sp_laea <- spTransform(species_sp, CRS("+proj=laea"))
plot(world_laea)
points(species_sp_laea, col = 'blue', cex = 0.5)
southern_africa <- map(database = "world", regions = c("South Africa", "Namibia", "Botswana", "Angola"), fill = T, plot = F)
length(southern_africa)
length(southern_africa$names)
length(countries)
southern_africa_new <- map2SpatialPolygons(southern_africa, countries, CRS("+proj=longlat +datum=WGS84"))
# now for species richness with rasters
r_map <- raster(world_laea)
res(r_map) <- 200000
richness <- rasterize(species_sp_laea, r_map, 'species', function(x, ...) length(unique(na.omit(x))))
plot(richness)
plot(world_laea, add=TRUE)
# so I was able to plot them as points, let me see if I can do the same thing with polygons
class(species_sp_laea)
class(sharkdf)
?SpatialPolygonsDataFrame
species_sp_laea_polygon <- SpatialPolygonsDataFrame(species_sp_laea)
coords <- split(sharkdf, species)
head(coords)
coords <- sharkdf
coords$species <- NULL
head(coords)
shark_polygon <- Polygon(coords)
shark_polygon_list <- list(shark_polygon)
shark_polygons <- Polygons(shark_polygon_list, "shark list")
shark_polygons_list <- list(shark_polygons)
shark_sp <- SpatialPolygons(shark_polygons_list, proj4string = CRS("+proj=laea"))
species_polygon_df <- SpatialPolygonsDataFrame(shark_sp, sharkdf)
savehistory("~/sharkbiogeography/plotting_species_richness.Rhistory")
