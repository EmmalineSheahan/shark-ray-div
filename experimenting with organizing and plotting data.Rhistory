install.packages("rjson")
library(rjson)
getwd()
great_white_example <- fromJSON(file = "Carcharodon carcharias.json")
# going to look at what the data entails
great_white_example
str(great_white_example)
dim(great_white_example)
names(great_white_example)
head(great_white_example$geometry)
head(great_white_example$geometry, n=1)
head(great_white_example$geometry, n=2)
names(great_white_example)
dim(great_white_example$geometry)
colnames(great_white_example$geometry) <- c("longitude", "latitude")
str(great_white_example$geometry)
smaller_range_example <- fromJSON(file = "Callorhinchus capensis.json")
names(smaller_range_example)
smaller_range_example$type
smaller_range_example$properties
class(smaller_range_example$geometry)
smaller_range_example$geometry
length(smaller_range_example$geometry)
df <- data.fram(matrix(unlist(smaller_range_example$geometry) nrow = 2, byrow = T))
geo_example <- smaller_range_example$geometry
df <- data.frame(matrix(unlist(geo_example), nrow=2, byrow = T))
df <- data.frame(matrix(unlist(geo_example), ncol = 2, nrow = 7277, byrow = T))
colnames(df) <- c("longitude", "latitude")
df
df <- data.frame(matrix(unlist(geo_example[2:7277]), ncol=2, byrow = T))
colnames(df) <- c("longitude", "latitude")
head(df)
# going to read in json file as spatial data
require(rgdal)
lemon_shark_example <- rgdal::readOGR("json/Negaprion brevirostris.geojson", "OGRGeoJSON")
lemon_shark_example <- rgdal::readOGR("json/Negaprion brevirostris.json", "OGRGeoJSON")
lemon_shark_example <- rgdal::readOGR("json/Negaprion brevirostris.json", "OGRJSON")
# going to see if I can convert the json file to geojson with the geojsonio package
install.packages(geojsonio)
install.packages("geojsonio")
require(geojsonio)
geojson_json(smaller_range_example, geometry = polygon, pretty = TRUE)
geojson_json(geo_example, geometry = polygon, pretty = TRUE)
dfgeo <- geojson_json(df, geometry = polygon, pretty = TRUE)
dfgeo <- geojson_json(df, geometry = "polygon", pretty = TRUE)
class(dfgeo)
# going to see if plot works on this geojson
plot(dfgeo)
proj4string(dfgeo)
dfgeo_sp <- readOGR(dfgeo, "OGRGeoJSON", verbose = F, p4s = '+init=epsg:4326')
# going to see if I can turn the geometry list directly into a spatial polygon
geo_example_co <- sapply(geo_example, Polygon)
# ok trying this the long way
head(df)
dput(df)
#turning the df back into a list
geo_list <- lapply(df)
geo_list <- lapply(df, function(x))
geo_list <- lapply(df, function(x) {x <- NULL; x })
geo_list_poly <- sapply(geo_list, Polygon)
geo_sp <- SpatialPolygons(list(geo_list), proj4string = CRS("+proj=longlat +datum=WGS84"))
# going to turn the df into a spatial points data frame
xy <- df[, c(1,2)]
spdf <- SpatialPointsDataFrame(coords = xy, data = df, proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
# going to see if spplot works on it
spplot(spdf)
head(df)
# spplot gave me something weird. the range itself looks right but it's separated into longitude and latitude. let me see if I can fix it
# going to make a world map
world <- map(database = "world", fill = T, plot = F)
require(maps)
require(maptools)
world <- map(database = "world", fill = T, plot = F)
world_sp <- map2SpatialPolygons(world, IDs, CRS("+proj=longlat"))
map2SpatialPolygons(world, spdf, CRS("+proj=longlat"))
map2SpatialPolygons(world, spdf, CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
going to fix the data frame
# going to fix the data frame
head(df)
coordinates(df) = ~Lat+lon
coordinates(df) <- ~Lat+Lon
coordinates(df) <- ~lat+lon
coordinates(df) <- ~"lat"+"lon"
?coordinates
coordinates(df) = ~longitude+latitude
class(df)
spplot(df)
# going to try and make a map
plot(world)
world <- map(database = "world")
plot(world)
plot(world, asp = 1)
names(df)
head(df)
points(df)
# going to make the map look better
world
world = map(database = "world")
points(df, col = "blue", cex = 0.5)
points(df, col = "blue", cex = 0.05)
# going to zoom in on it
world = map(database = "world", regions = c("Angola", "Namibia", "Botswana", "South Africa"))
points(df, col = "red", cex = 0.5)
# going to try with a bigger range
names(great_white_example)
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry), ncol = 2, byrow = T))
head(greatwhitedf)
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry[2: ]), ncol =2, byrow = T))
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry[2:1691871]), ncol = 2, byrow = T))
colnames(greatwhitedf) <- c("longitude", "latitude")
head(greatwhitedf)
coordinates(greatwhitedf) <- ~longitude+latitude
class(greatwhitedf)
world = map(database = "World")
world = map(database = "world")
points(greatwhitedf, col = "blue", cex = 0.5)
# so I figured out how to plot the ranges as spatial points, now I want to plot them as spatial polygons
?Polygon
greatwhitepolygon <- Polygon(greatwhitedf)
greatwhitesp <- SpatialPolygons(greatwhitepolygon, proj4string = CRS("+proj=longlat +ellps=WGS84"))
greatwhitepolygon_list <- list(greatwhitepolygon)
greatwhitesp <- SpatialPolygons(greatwhitepolygon_list, proj4string = CRS("+proj=longlat +ellps=WGS84"))
Polygons(greatwhitepolygon_list, "greatwhiterange")
greatwhitepolygons <- Polygons(greatwhitepolygon_list, "greatwhiterange")
greatwhite_sp <- SpatialPolygons(greatwhitepolygons, proj4string = CRS("+proj=longlat +ellps=WGS84"))
greatwhite_sp <- SpatialPolygons(greatwhitepolygon_list, proj4string = CRS("+proj=longlat +ellps=WGS84"))
greatwhite_sp <- SpatialPolygons(list(greatwhitepolygons), proj4string = CRS("+proj=longlat +ellps=WGS84"))
plot(greatwhite_sp)
plot(greatwhitepolygon)
# well this plot looks like a mess so I think I need to specify something in the pO
?Polygon
?map
?map2SpatialPolygons
world_map <- map2SpatialPolygons(world, IDs = world$names, proj4string = CRS("+proj=longlat +ellps=WGS84"))
world <- map(database ="world", fill = T, plot = F)
world_sp <- map2SpatialPolygons(world, IDs = world$names, proj4string = CRS("+proj=longlat +ellps=WGS84"))
?spplot
# going to see what happens if I use spplot
spplot(world_sp, greatwhite_sp)
plot(world_sp)
plot(world_sp, greatwhite_sp)
# let me see if I can plot the range better with ggplot
install.packages("ggplot2")
require(ggplot2)
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude)) + geom_polygon()
greatwhitedf <- data.frame(matrix(unlist(great_white_example$geometry[2:1691871]), ncol = 2, byrow = T))
colnames(greatwhitedf) <- c("longitude", "latitude")
head(greatwhitedf)
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude)) + geom_polygon
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude)) +geom_polygon()
great_white_range_map
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude, group = group, fill = T)) + geom_polygon() + theme(legend.position = "none", title = element_blank(), axis.text = element_blank())
great_white_range_map
great_white_range_map <- ggplot(data = greatwhitedf, aes(x = longitude, y = latitude, fill = T)) + geom_polygon() + theme(legend.position = "none", title = element_blank(), axis.text = element_blank())
great_white_range_map
greatwhitedf["new.col"] <- c(1:1691871)
order <- c(1:1691871)
greatwhitedf <- data.frame(greatwhitedf, order)
order <- c(1:845935)
greatwhitedf <- data.frame(greatwhitedf, order)
head(greatwhitedf)
great_white_range_map <- ggplot() + geom_polygon(data = greatwhitedf, aes(x = longitude, y = latitude, fill = T))
great_white_range_map
install.packages("ggmap")
require(ggmap)
world <- get_map("world")
great_white_range_map <- ggmap(world) + ggplot() + geom_polygon(data = greatwhitedf, aes(x = longitude, y = latitude)) + theme(legend.position = "none", title = element_blank(), axis.text = element_blank())
great_white_range_map <- ggmap(world) + ggplot(data = greatwhitedf, aes(x = longitude, y = latitude))
savehistory("~/sharkbiogeography/experimenting with organizing and plotting data.Rhistory")
